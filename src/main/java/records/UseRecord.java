package records;

// creates private final fields, and this is the
// ONLY way to create fields
// no extends clause permitted... Always child of Record
record Customer(String name, int creditLimit) /*extends java.lang.Record*/ implements Comparable<Customer> {
  private static String message = "Buy stuff from me!!!";
  static {
    System.out.println("Initializing the record Customer");
  }
//  {
//
//  }
  public Customer {
    System.out.println("in preamble code");
    // in here, name and creditLimit are the formal params to the constructor,
    // NOT the this.name etc.
    // FURTHER we CANNOT access the fields..
    if (name == null) throw new IllegalArgumentException("Must have a name");
//    this.name = name;
  }

  public boolean isWorthMore() {
    return this.creditLimit > 10_000;
  }

  public static String getCustomerMessage() {
    return message;
  }

  @Override
  public String toString() {
    return "I'm a customer, I'm always right, name =" + name;
  }

  public Customer(String name) {
    this(name, 100); // must delegate to the "canonical" constructor
    System.out.println("just created a Customer with default credit limit");
  }

  @Override
  public int compareTo(Customer o) {
    return Integer.compare(creditLimit, o.creditLimit);
  }
}

// record types are final, no subtype permitted
//class Cust2 extends Customer {
//  public Cust2() {
//    super("Fred", 99);
//  }
//}

public class UseRecord {
  public static void main(String[] args) {
    Customer c1 = new Customer("Fred", 1000);
    Customer c2 = new Customer("Fred", 1000);
    Customer c3 = new Customer("Frederick", 1000);
    Customer c4 = new Customer("Frederick");

    System.out.println(c1);
    System.out.println("c1.equals(c2) " + c1.equals(c2));
    System.out.println(c1.hashCode());
    System.out.println(c2.hashCode());
    System.out.println(c3.hashCode());
    // autogenerated "getters" don't use the "get" prefix convention
    System.out.println("first cusomer is called " + c1.name());

    Object obj = c1;
    if (obj instanceof Customer thCust) {
      System.out.println("yes it is a customer " + thCust);
    }
  }
}
